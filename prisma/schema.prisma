generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  emailVerified DateTime?
  image         String?
  password      String
  accounts      Account[]
  comment       Comment[]
  posts         Post[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Field {
  id    Int    @id @default(autoincrement())
  name  String @unique
  posts Post[]
}

model Post {
  id        Int            @id @default(autoincrement())
  title     String
  content   Json
  createdAt DateTime       @default(now())
  createdBy String
  details   String
  thumbnail String
  field     Int
  user      User           @relation(fields: [createdBy], references: [id])
  fields    Field          @relation(fields: [field], references: [id])
  comments  PostComments[]
  tags      PostTags[]
}

model Tags {
  id    Int        @id @default(autoincrement())
  name  String     @unique
  posts PostTags[]
}

model PostTags {
  postId Int
  tagId  Int
  post   Post @relation(fields: [postId], references: [id])
  tag    Tags @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model Comment {
  id        Int            @id @default(autoincrement())
  createdBy String
  content   String
  user      User           @relation(fields: [createdBy], references: [id])
  posts     PostComments[]
}

model PostComments {
  postId    Int
  commentId Int
  comment   Comment @relation(fields: [commentId], references: [id])
  post      Post    @relation(fields: [postId], references: [id])

  @@id([postId, commentId])
}

model ImageDB {
  url      String @unique
  publicID String @id
}
